/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -711665542952288846L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"com.kafka.avro.model\",\"fields\":[{\"name\":\"studentId\",\"type\":\"string\"},{\"name\":\"studentName\",\"type\":\"string\"},{\"name\":\"age\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"courses\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Course\",\"fields\":[{\"name\":\"courseId\",\"type\":\"string\"},{\"name\":\"courseName\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Student> ENCODER =
      new BinaryMessageEncoder<Student>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Student> DECODER =
      new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Student> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Student> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Student> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Student to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Student from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Student instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Student fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence studentId;
  private java.lang.CharSequence studentName;
  private java.lang.Integer age;
  private java.util.List<com.kafka.avro.model.Course> courses;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Student() {}

  /**
   * All-args constructor.
   * @param studentId The new value for studentId
   * @param studentName The new value for studentName
   * @param age The new value for age
   * @param courses The new value for courses
   */
  public Student(java.lang.CharSequence studentId, java.lang.CharSequence studentName, java.lang.Integer age, java.util.List<com.kafka.avro.model.Course> courses) {
    this.studentId = studentId;
    this.studentName = studentName;
    this.age = age;
    this.courses = courses;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studentId;
    case 1: return studentName;
    case 2: return age;
    case 3: return courses;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studentId = (java.lang.CharSequence)value$; break;
    case 1: studentName = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    case 3: courses = (java.util.List<com.kafka.avro.model.Course>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'studentId' field.
   * @return The value of the 'studentId' field.
   */
  public java.lang.CharSequence getStudentId() {
    return studentId;
  }


  /**
   * Sets the value of the 'studentId' field.
   * @param value the value to set.
   */
  public void setStudentId(java.lang.CharSequence value) {
    this.studentId = value;
  }

  /**
   * Gets the value of the 'studentName' field.
   * @return The value of the 'studentName' field.
   */
  public java.lang.CharSequence getStudentName() {
    return studentName;
  }


  /**
   * Sets the value of the 'studentName' field.
   * @param value the value to set.
   */
  public void setStudentName(java.lang.CharSequence value) {
    this.studentName = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'courses' field.
   * @return The value of the 'courses' field.
   */
  public java.util.List<com.kafka.avro.model.Course> getCourses() {
    return courses;
  }


  /**
   * Sets the value of the 'courses' field.
   * @param value the value to set.
   */
  public void setCourses(java.util.List<com.kafka.avro.model.Course> value) {
    this.courses = value;
  }

  /**
   * Creates a new Student RecordBuilder.
   * @return A new Student RecordBuilder
   */
  public static com.kafka.avro.model.Student.Builder newBuilder() {
    return new com.kafka.avro.model.Student.Builder();
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Student RecordBuilder
   */
  public static com.kafka.avro.model.Student.Builder newBuilder(com.kafka.avro.model.Student.Builder other) {
    if (other == null) {
      return new com.kafka.avro.model.Student.Builder();
    } else {
      return new com.kafka.avro.model.Student.Builder(other);
    }
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Student instance.
   * @param other The existing instance to copy.
   * @return A new Student RecordBuilder
   */
  public static com.kafka.avro.model.Student.Builder newBuilder(com.kafka.avro.model.Student other) {
    if (other == null) {
      return new com.kafka.avro.model.Student.Builder();
    } else {
      return new com.kafka.avro.model.Student.Builder(other);
    }
  }

  /**
   * RecordBuilder for Student instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private java.lang.CharSequence studentId;
    private java.lang.CharSequence studentName;
    private java.lang.Integer age;
    private java.util.List<com.kafka.avro.model.Course> courses;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafka.avro.model.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.studentName)) {
        this.studentName = data().deepCopy(fields()[1].schema(), other.studentName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.courses)) {
        this.courses = data().deepCopy(fields()[3].schema(), other.courses);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Student instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafka.avro.model.Student other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.studentName)) {
        this.studentName = data().deepCopy(fields()[1].schema(), other.studentName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.courses)) {
        this.courses = data().deepCopy(fields()[3].schema(), other.courses);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'studentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getStudentId() {
      return studentId;
    }


    /**
      * Sets the value of the 'studentId' field.
      * @param value The value of 'studentId'.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder setStudentId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.studentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'studentId' field has been set.
      * @return True if the 'studentId' field has been set, false otherwise.
      */
    public boolean hasStudentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'studentId' field.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder clearStudentId() {
      studentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'studentName' field.
      * @return The value.
      */
    public java.lang.CharSequence getStudentName() {
      return studentName;
    }


    /**
      * Sets the value of the 'studentName' field.
      * @param value The value of 'studentName'.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder setStudentName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.studentName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'studentName' field has been set.
      * @return True if the 'studentName' field has been set, false otherwise.
      */
    public boolean hasStudentName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'studentName' field.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder clearStudentName() {
      studentName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder setAge(java.lang.Integer value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder clearAge() {
      age = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'courses' field.
      * @return The value.
      */
    public java.util.List<com.kafka.avro.model.Course> getCourses() {
      return courses;
    }


    /**
      * Sets the value of the 'courses' field.
      * @param value The value of 'courses'.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder setCourses(java.util.List<com.kafka.avro.model.Course> value) {
      validate(fields()[3], value);
      this.courses = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'courses' field has been set.
      * @return True if the 'courses' field has been set, false otherwise.
      */
    public boolean hasCourses() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'courses' field.
      * @return This builder.
      */
    public com.kafka.avro.model.Student.Builder clearCourses() {
      courses = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Student build() {
      try {
        Student record = new Student();
        record.studentId = fieldSetFlags()[0] ? this.studentId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.studentName = fieldSetFlags()[1] ? this.studentName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        record.courses = fieldSetFlags()[3] ? this.courses : (java.util.List<com.kafka.avro.model.Course>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Student>
    WRITER$ = (org.apache.avro.io.DatumWriter<Student>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Student>
    READER$ = (org.apache.avro.io.DatumReader<Student>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.studentId);

    out.writeString(this.studentName);

    if (this.age == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.age);
    }

    long size0 = this.courses.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.kafka.avro.model.Course e0: this.courses) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.studentId = in.readString(this.studentId instanceof Utf8 ? (Utf8)this.studentId : null);

      this.studentName = in.readString(this.studentName instanceof Utf8 ? (Utf8)this.studentName : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.age = null;
      } else {
        this.age = in.readInt();
      }

      long size0 = in.readArrayStart();
      java.util.List<com.kafka.avro.model.Course> a0 = this.courses;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.kafka.avro.model.Course>((int)size0, SCHEMA$.getField("courses").schema());
        this.courses = a0;
      } else a0.clear();
      SpecificData.Array<com.kafka.avro.model.Course> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.kafka.avro.model.Course>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.kafka.avro.model.Course e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.kafka.avro.model.Course();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.studentId = in.readString(this.studentId instanceof Utf8 ? (Utf8)this.studentId : null);
          break;

        case 1:
          this.studentName = in.readString(this.studentName instanceof Utf8 ? (Utf8)this.studentName : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.age = null;
          } else {
            this.age = in.readInt();
          }
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<com.kafka.avro.model.Course> a0 = this.courses;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.kafka.avro.model.Course>((int)size0, SCHEMA$.getField("courses").schema());
            this.courses = a0;
          } else a0.clear();
          SpecificData.Array<com.kafka.avro.model.Course> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.kafka.avro.model.Course>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.kafka.avro.model.Course e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.kafka.avro.model.Course();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










